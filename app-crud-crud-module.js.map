{"version":3,"sources":["webpack:///./src/app/crud/crud-routing.module.ts","webpack:///./src/app/crud/crud.component.css","webpack:///./src/app/crud/crud.component.html","webpack:///./src/app/crud/crud.component.ts","webpack:///./src/app/crud/crud.module.ts","webpack:///./src/app/crud/store/crud-state.interface.ts","webpack:///./src/app/crud/store/crud.actions.ts","webpack:///./src/app/crud/store/crud.effects.ts","webpack:///./src/app/crud/store/crud.reducer.ts","webpack:///./src/app/crud/store/crud.selectors.ts","webpack:///./src/app/crud/store/index.ts"],"names":[],"mappings":"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","file":"app-crud-crud-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CrudComponent } from '@app/crud/crud.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: CrudComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CrudRoutingModule {\n  static components = [\n    CrudComponent\n  ];\n}\n","module.exports = \"/* You can add global styles to this file, and also import other style files */\\n\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY3J1ZC9jcnVkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOEVBQThFIiwiZmlsZSI6InNyYy9hcHAvY3J1ZC9jcnVkLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBZb3UgY2FuIGFkZCBnbG9iYWwgc3R5bGVzIHRvIHRoaXMgZmlsZSwgYW5kIGFsc28gaW1wb3J0IG90aGVyIHN0eWxlIGZpbGVzICovXG5cbiJdfQ== */\"","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <h3>Demo 6 - CRUD Operations using @ngrx/entity</h3>\\n</div>\\n<ng-container *ngIf=\\\"isLoading$ | async\\\">\\n  <div class=\\\"loader\\\"></div>\\n</ng-container>\\n<div class=\\\"main\\\">\\n  <div class='formbg'>\\n    <app-employee-form\\n    [employeeToEdit] = \\\"employeeToEdit\\\"\\n    [isEditing]=\\\"isEditing\\\"\\n    (cancel) = \\\"onCancel($event)\\\"\\n    (addEmployee)=\\\"onAddEmployee($event)\\\"\\n    (updateEmployee)=\\\"onUpdateEmployee($event)\\\" >\\n    </app-employee-form>\\n  </div>\\n  <div class='tablebg'>\\n    <app-employee-table\\n    [employees]=\\\"employees$ | async\\\"\\n    (editEmployee)=\\\"onEditEmployee($event)\\\"\\n    (deleteEmployee)=\\\"onDeleteEmployee($event)\\\" >\\n    </app-employee-table>\\n  </div>\\n</div>\\n<div *ngIf=\\\"errorMessage$ | async\\\" class=\\\"alert-error\\\">\\n  {{ errorMessage$ | async }}\\n</div>\\n\\n\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { CrudStoreActions, CrudStoreSelectors } from '@app/crud/store';\nimport { Employee } from '@app/in-memory-api/employee.interface';\nimport * as fromRoot from '@app/root-store';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-crud',\n  templateUrl: './crud.component.html',\n  styleUrls: ['./crud.component.css']\n})\nexport class CrudComponent implements OnInit {\n\n  public isEditing = false;\n  public employees$: Observable<Employee[]>;\n  public errorMessage$: Observable<string>;\n  public isLoading$: Observable<boolean>;\n  public employeeToEdit: Employee;\n\n  constructor(\n    private store$: Store<fromRoot.State>\n  ) { }\n\n  ngOnInit() {\n\n    this.store$.dispatch(new CrudStoreActions.CRUDEmployeeLoadRequest());\n\n    this.isLoading$ = this.store$.pipe(\n      select(CrudStoreSelectors.selectCrudLoadingStatus)\n    );\n\n    this.employees$ = this.store$.pipe(\n      select(CrudStoreSelectors.selectCrudAllEmpolyees)\n    );\n\n    this.errorMessage$ = this.store$.pipe(\n      select(CrudStoreSelectors.selectCrudError)\n    );\n  }\n\n  public onAddEmployee(employee: Employee) {\n    employee.id = null;\n    this.store$.dispatch(new CrudStoreActions.CRUDEmployeeCreateRequest(employee));\n  }\n\n  public onUpdateEmployee(employee: Employee) {\n    this.store$.dispatch(new CrudStoreActions.CRUDEmployeeUpdateRequest(employee));\n  }\n\n  public onEditEmployee(employee: Employee) {\n    this.isEditing = true;\n    this.employeeToEdit = employee;\n  }\n\n  public onDeleteEmployee(id: number | null) {\n    this.store$.dispatch(new CrudStoreActions.CRUDEmployeeDeleteRequest(id));\n  }\n\n  public onCancel(isEdit: boolean) {\n    this.isEditing = isEdit;\n    this.employeeToEdit = null;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CrudRoutingModule } from '@app/crud/crud-routing.module';\nimport { CrudEffects, crudReducer } from '@app/crud/store';\nimport { InMemoryApiModule } from '@app/in-memory-api/in-memory-api.module';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { SharedModule } from '@shared/shared.module';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    InMemoryApiModule,\n    StoreModule.forFeature('crud', crudReducer),\n    EffectsModule.forFeature(\n      [ CrudEffects ]\n    ),\n    CrudRoutingModule\n  ],\n  declarations: [ CrudRoutingModule.components ]\n})\nexport class CrudModule { }\n","import { Employee } from '@app/in-memory-api/employee.interface';\nimport * as fromRoot from '@app/root-store';\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\n\n// state for this feature (search)\nexport interface CrudState extends EntityState<Employee> {\n  // additional entities state properties goes here\n  isLoading: boolean;\n  error?: string | null;\n}\n// Note: Since  primary key is 'id', Method to select primary key is not needed\n// unlike we did it for demo 5\n\n/* A compare function used to sort the collection. The comparer function\nis only needed if the collection needs to be sorted before being displayed.\n */\nexport function sortByName(a: Employee, b: Employee): number {\n  return a.name.localeCompare(b.name);\n}\n\n/*\nSetting to false to leave the collection unsorted, will sorted by id which is more performant\nduring CRUD operations.\n*/\nexport const crudEntityadapter: EntityAdapter<Employee> = createEntityAdapter<Employee>({\n  sortComparer: sortByName\n  // sortComparer: false\n});\n\nexport const initialState: CrudState = crudEntityadapter.getInitialState({\n  isLoading: false,\n  error: null\n});\n\n\n// Out-of-the-box, created entity adapter provides built-in default selectors\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = crudEntityadapter.getSelectors();\n\n\n// Extends the global state to include the search2 feature.\n// This is required because search2 feature module are lazy loaded.\n// So the reference to search2 cannot be added to global state.ts directly.\nexport interface State extends fromRoot.State {\n  crud: CrudState;\n}\n","import { Employee } from '@app/in-memory-api/employee.interface';\nimport { isActionNameUnique } from '@app/root-store';\nimport { Action } from '@ngrx/store';\n\n// TypeScript enum’s are immutable\nexport enum ActionTypes {\n  CRUD_EMPLOYEE_LOAD_REQUEST = '[CRUD Page] Load Employee Request',\n  CRUD_EMPLOYEE_LOAD_SUCCESS = '[CRUD Page] Load Employee Success',\n  CRUD_EMPLOYEE_CREATE_REQUEST = '[CRUD Page] Create Employee Request',\n  CRUD_EMPLOYEE_UPDATE_REQUEST = '[CRUD Page] Update Employee Request',\n  CRUD_EMPLOYEE_CREATE_OR_UPDATE_SUCCESS = '[CRUD Page] Create or Update Employee Success',\n  CRUD_EMPLOYEE_DELETE_REQUEST = '[CRUD Page] Delete Employee Request',\n  CRUD_EMPLOYEE_DELETE_SUCCESS = '[CRUD Page] Delete Employee Success',\n  CRUD_EMPLOYEE_FAILURE = '[CRUD Page] Employee Failure'\n}\n\n// To ensure NgRX actions have unique names across the application.\n// This prevents any duplicate actions being dispatched.\nisActionNameUnique(ActionTypes);\nexport class CRUDEmployeeLoadRequest implements Action {\n  readonly type = ActionTypes.CRUD_EMPLOYEE_LOAD_REQUEST;\n  constructor() {}\n}\n\nexport class CRUDEmployeeLoadSuccess implements Action {\n  readonly type = ActionTypes.CRUD_EMPLOYEE_LOAD_SUCCESS;\n  constructor(public payload: Employee[]) {}\n}\n\nexport class CRUDEmployeeCreateRequest implements Action {\n  readonly type = ActionTypes.CRUD_EMPLOYEE_CREATE_REQUEST;\n  constructor(public payload: Employee) {}\n}\n\nexport class CRUDEmployeeUpdateRequest implements Action {\n  readonly type = ActionTypes.CRUD_EMPLOYEE_UPDATE_REQUEST;\n  constructor(public payload: Employee) {}\n}\n\nexport class CRUDEmployeeCreateOrUpdateSuccess implements Action {\n  readonly type = ActionTypes.CRUD_EMPLOYEE_CREATE_OR_UPDATE_SUCCESS;\n  constructor(public payload: Employee) {}\n}\n\nexport class CRUDEmployeeDeleteRequest implements Action {\n  readonly type = ActionTypes.CRUD_EMPLOYEE_DELETE_REQUEST;\n  constructor(public payload: number) {}\n}\n\nexport class CRUDEmployeeDeleteSuccess implements Action {\n  readonly type = ActionTypes.CRUD_EMPLOYEE_DELETE_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class CRUDEmployeeFailure implements Action {\n  readonly type = ActionTypes.CRUD_EMPLOYEE_FAILURE;\n  constructor(public payload: string) {}\n}\n\nexport type Union\n= CRUDEmployeeLoadRequest\n| CRUDEmployeeLoadSuccess\n| CRUDEmployeeCreateRequest\n| CRUDEmployeeUpdateRequest\n| CRUDEmployeeCreateOrUpdateSuccess\n| CRUDEmployeeDeleteRequest\n| CRUDEmployeeDeleteSuccess\n| CRUDEmployeeFailure;\n","import { Injectable } from '@angular/core';\nimport * as crudActions from '@app/crud/store/crud.actions';\nimport { Employee } from '@app/in-memory-api/employee.interface';\nimport { EmployeeService } from '@app/in-memory-api/employee.service';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\n\n@Injectable()\nexport class CrudEffects {\n\n  constructor(\n    private employeeService: EmployeeService,\n    private actions$: Actions\n  ) { }\n\n  @Effect()\n  loadAllEmployeeEffects$: Observable<Action> = this.actions$.pipe(\n    ofType<crudActions.CRUDEmployeeLoadRequest>(crudActions.ActionTypes.CRUD_EMPLOYEE_LOAD_REQUEST),\n    switchMap(() =>\n      this.employeeService.getEmployees().pipe(\n        map((employees: Employee[]) => (new crudActions.CRUDEmployeeLoadSuccess(employees))),\n        catchError( (error: string) => of(new crudActions.CRUDEmployeeFailure(error)))\n      )\n    )\n  );\n\n    /* Except GET, for others POST,DELET, UPADTE always use concatMap\n   concatMap maintains order in which request comes , queue the request and\n   returns the response in order it received whereas mergeMap does n't\n   maintain order. Switch will cancel the previous request , takes only\n   the latest one, switchMap is safe only for GET method. */\n  @Effect()\n  createEmployeeEffects$: Observable<Action> = this.actions$.pipe(\n    ofType<crudActions.CRUDEmployeeCreateRequest>(crudActions.ActionTypes.CRUD_EMPLOYEE_CREATE_REQUEST),\n    map((action: crudActions.CRUDEmployeeCreateRequest) => action.payload),\n    concatMap((employee: Employee) =>\n      this.employeeService.createEmployee(employee).pipe(\n        map((responseEmployee: Employee) => (new crudActions.CRUDEmployeeCreateOrUpdateSuccess(responseEmployee))),\n        catchError( (error: string) => of(new crudActions.CRUDEmployeeFailure(error)))\n      )\n    )\n  );\n\n  @Effect()\n  updateEmployeeEffects$: Observable<Action> = this.actions$.pipe(\n    ofType<crudActions.CRUDEmployeeUpdateRequest>(crudActions.ActionTypes.CRUD_EMPLOYEE_UPDATE_REQUEST),\n    map((action: crudActions.CRUDEmployeeUpdateRequest) => action.payload),\n    concatMap((employee: Employee) =>\n      this.employeeService.updateEmployee(employee).pipe(\n        map(() => (new crudActions.CRUDEmployeeCreateOrUpdateSuccess(employee))),\n        catchError( (error: string) => of(new crudActions.CRUDEmployeeFailure(error)))\n      )\n    )\n  );\n\n @Effect()\n  deleteEmployeeEffects$: Observable<Action> = this.actions$.pipe(\n    ofType<crudActions.CRUDEmployeeDeleteRequest>(crudActions.ActionTypes.CRUD_EMPLOYEE_DELETE_REQUEST),\n    map((action: crudActions.CRUDEmployeeDeleteRequest) => action.payload),\n    concatMap((id: number) =>\n      this.employeeService.removeEmployee(id).pipe(\n        map(() => (new crudActions.CRUDEmployeeDeleteSuccess(id))),\n        catchError( (error: string) => of(new crudActions.CRUDEmployeeFailure(error)))\n      )\n    )\n  );\n\n}\n","import { ActionTypes, Union } from '@app/crud/store/crud.actions';\nimport { crudEntityadapter, CrudState, initialState } from './crud-state.interface';\n\nexport function crudReducer(state = initialState, action: Union): CrudState {\n  switch (action.type) {\n\n    case ActionTypes.CRUD_EMPLOYEE_LOAD_REQUEST:\n    case ActionTypes.CRUD_EMPLOYEE_CREATE_REQUEST:\n    case ActionTypes.CRUD_EMPLOYEE_UPDATE_REQUEST:\n    case ActionTypes.CRUD_EMPLOYEE_DELETE_REQUEST: {\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    }\n\n    case ActionTypes.CRUD_EMPLOYEE_LOAD_SUCCESS: {\n      // Replace current collection with provided collection\n      return crudEntityadapter.addAll(action.payload, {\n        ...state,\n        isLoading: false,\n        error: null\n      });\n    }\n\n    case ActionTypes.CRUD_EMPLOYEE_CREATE_OR_UPDATE_SUCCESS: {\n      // Add or Update one entity in the collection\n      return crudEntityadapter.upsertOne(action.payload, {\n        ...state,\n        isLoading: false,\n        error: null\n      });\n    }\n\n    case ActionTypes.CRUD_EMPLOYEE_DELETE_SUCCESS: {\n      // Remove one entity from the collection\n      return crudEntityadapter.removeOne(action.payload, {\n        ...state,\n        isLoading: false,\n        error: null\n      });\n    }\n\n    case ActionTypes.CRUD_EMPLOYEE_FAILURE:\n    return {\n      ...state,\n      isLoading: false,\n      error: action.payload,\n    };\n\n    default:\n      return state;\n  }\n}\n","\nimport { CrudState, selectAll } from '@app/crud/store/crud-state.interface';\nimport { Employee } from '@app/in-memory-api/employee.interface';\nimport { createFeatureSelector, createSelector, MemoizedSelector } from '@ngrx/store';\n\n// Selector functions\nconst selectCrudState: MemoizedSelector<object, CrudState>\n  = createFeatureSelector<CrudState>('crud');\n\nexport const selectCrudError: MemoizedSelector<object, string> =\ncreateSelector(\n  selectCrudState,\n  (state: CrudState): string => state.error\n);\n\nexport const selectCrudLoadingStatus: MemoizedSelector<object, boolean> =\ncreateSelector(\n  selectCrudState,\n  (state: CrudState): boolean => state.isLoading\n);\n\n// Create the default selectors\nexport const selectCrudAllEmpolyees: MemoizedSelector<object,  Employee[]> =\ncreateSelector(\n  selectCrudState,\n  // using created entity adapter's built-in selectors\n  selectAll\n);\n\n","import * as CrudStoreActions from '@app/crud/store/crud.actions';\nimport { CrudEffects } from '@app/crud/store/crud.effects';\nimport { crudReducer } from '@app/crud/store/crud.reducer';\nimport * as CrudStoreSelectors from '@app/crud/store/crud.selectors';\n\nexport { CrudStoreActions, CrudEffects, crudReducer, CrudStoreSelectors };\n\n"],"sourceRoot":""}