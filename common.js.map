{"version":3,"sources":["webpack:///./src/app/core/services/country.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Country } from '@core/services/country.model';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, finalize, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n@Injectable()\nexport class CountryService {\n\n  constructor(private http: HttpClient) { }\n\n  public getCountryDetail(countryName: String):  Observable<any> {\n    return this.http.get<Country[]>(`https://restcountries.eu/rest/v2/name/${countryName}?fullText=true`)\n    .pipe(\n      tap((response: any) => {\n       console.log(response);\n      }),\n      map((response: any) => {\n        const country: Country = new Country();\n        const countryResponse = response[0];\n        country.name =  countryResponse.name;\n        country.capital =  countryResponse.capital;\n        country.region =  countryResponse.region;\n        country.population =  countryResponse.population;\n        country.currency =  countryResponse.currencies[0].code;\n        country.flag = countryResponse.flag;\n        return country;\n      }),\n      catchError(this.handleAndThrowRemoteError.bind(this)),\n      finalize(() => {\n        console.log('Clean up your resource here ');\n      })\n    );\n  }\n\n  public getCountries(searchKey: string):  Observable<any> {\n    return this.http.get<Country[]>(`https://restcountries.eu/rest/v2/name/${searchKey}`)\n    .pipe(\n      map((response: any) => {\n        const countries: Country[] = [];\n        response.forEach(countryResponse => {\n          const country: Country = new Country();\n          country.name =  countryResponse.name;\n          country.capital =  countryResponse.capital;\n          country.region =  countryResponse.region;\n          country.population =  countryResponse.population;\n          country.currency =  countryResponse.currencies[0].code;\n          country.flag = countryResponse.flag;\n          countries.push(country);\n        });\n        return countries;\n      }),\n      catchError(this.handleAndThrowRemoteError.bind(this)),\n      finalize(() => {\n        console.log('Clean up your resource here ');\n      })\n    );\n  }\n\n  public handleAndThrowRemoteError(error: Error | HttpErrorResponse | any): Observable<any> {\n    let errorMessage = 'An error occurred: ';\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    console.error('Error caught while making remote Service call', error);\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage += `An error occurred at client: ${error.error.message}`;\n    } else {\n         // Server-Side Error: The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      if (error.error && error.error.status) {\n        errorMessage += `Backend service returns error - ${error.error.status}: ${error.error.message}`;\n      } else {\n        errorMessage += `Backend service returns error - ${error.status}: ${error.message}`;\n      }\n    }\n    return throwError(errorMessage);\n  }\n\n}\n"],"sourceRoot":""}