{"version":3,"sources":["webpack:///./src/app/crud2/crud2-routing.module.ts","webpack:///./src/app/crud2/crud2.component.css","webpack:///./src/app/crud2/crud2.component.html","webpack:///./src/app/crud2/crud2.component.ts","webpack:///./src/app/crud2/crud2.module.ts","webpack:///./src/app/crud2/store/crud2-state.interface.ts","webpack:///./src/app/crud2/store/crud2-store.facade.ts","webpack:///./src/app/crud2/store/crud2-store.module.ts","webpack:///./src/app/crud2/store/crud2.actions.ts","webpack:///./src/app/crud2/store/crud2.effects.ts","webpack:///./src/app/crud2/store/crud2.reducer.ts","webpack:///./src/app/crud2/store/crud2.selectors.ts","webpack:///./src/app/crud2/store/index.ts"],"names":[],"mappings":"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","file":"app-crud2-crud2-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { Crud2Component } from '@app/crud2/crud2.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: Crud2Component\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class Crud2RoutingModule {\n  static components = [\n    Crud2Component\n  ];\n}\n","module.exports = \"/* You can add global styles to this file, and also import other style files */\\n\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY3J1ZDIvY3J1ZDIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4RUFBOEUiLCJmaWxlIjoic3JjL2FwcC9jcnVkMi9jcnVkMi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogWW91IGNhbiBhZGQgZ2xvYmFsIHN0eWxlcyB0byB0aGlzIGZpbGUsIGFuZCBhbHNvIGltcG9ydCBvdGhlciBzdHlsZSBmaWxlcyAqL1xuXG4iXX0= */\"","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <h3>Demo 7 - @ngrx/entity CRUD with Facade Pattern</h3>\\n</div>\\n<ng-container *ngIf=\\\"isLoading$ | async\\\">\\n  <div class=\\\"loader\\\"></div>\\n</ng-container>\\n<div class=\\\"main\\\">\\n  <div class='formbg'>\\n    <app-employee-form\\n    [employeeToEdit] = \\\"employeeToEdit\\\"\\n    [isEditing]=\\\"isEditing\\\"\\n    (cancel) = \\\"onCancel($event)\\\"\\n    (addEmployee)=\\\"onAddEmployee($event)\\\"\\n    (updateEmployee)=\\\"onUpdateEmployee($event)\\\" >\\n    </app-employee-form>\\n  </div>\\n  <div class='tablebg'>\\n    <app-employee-table\\n    [employees]=\\\"employees$ | async\\\"\\n    (editEmployee)=\\\"onEditEmployee($event)\\\"\\n    (deleteEmployee)=\\\"onDeleteEmployee($event)\\\" >\\n    </app-employee-table>\\n  </div>\\n</div>\\n<div *ngIf=\\\"errorMessage$ | async\\\" class=\\\"alert-error\\\">\\n  {{ errorMessage$ | async }}\\n</div>\\n\\n\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Crud2StoreFacade } from '@app/crud2/store';\nimport { Employee } from '@app/in-memory-api/employee.interface';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-crud2',\n  templateUrl: './crud2.component.html',\n  styleUrls: ['./crud2.component.css']\n})\nexport class Crud2Component implements OnInit {\n\n  public isEditing = false;\n  public employees$: Observable<Employee[]>;\n  public errorMessage$: Observable<string>;\n  public isLoading$: Observable<boolean>;\n  public employeeToEdit: Employee;\n\n  constructor(private crud2StoreFacade: Crud2StoreFacade) { }\n\n  ngOnInit() {\n    this.crud2StoreFacade.loadAllEmployee();\n    this.isLoading$ = this.crud2StoreFacade.isLoading$;\n    this.employees$ = this.crud2StoreFacade.employees$;\n    this.errorMessage$ = this.crud2StoreFacade.errorMessage$;\n  }\n\n  public onAddEmployee(employee: Employee) {\n    this.crud2StoreFacade.addEmployee(employee);\n  }\n\n  public onUpdateEmployee(employee: Employee) {\n    this.crud2StoreFacade.updateEmployee(employee);\n  }\n\n  public onEditEmployee(employee: Employee) {\n    this.isEditing = true;\n    this.employeeToEdit = employee;\n  }\n\n  public onDeleteEmployee(id: number | null) {\n    this.crud2StoreFacade.deleteEmployee(id);\n  }\n\n  public onCancel(isEdit: boolean) {\n    this.isEditing = isEdit;\n    this.employeeToEdit = null;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Crud2RoutingModule } from '@app/crud2/crud2-routing.module';\nimport { Crud2StoreModule } from '@app/crud2/store';\nimport { InMemoryApiModule } from '@app/in-memory-api/in-memory-api.module';\nimport { SharedModule } from '@shared/shared.module';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    InMemoryApiModule,\n    Crud2StoreModule,\n    Crud2RoutingModule\n  ],\n  declarations: [Crud2RoutingModule.components]\n})\nexport class Crud2Module { }\n","import { Employee } from '@app/in-memory-api/employee.interface';\nimport * as fromRoot from '@app/root-store';\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\n\n// state for this feature (search)\nexport interface Crud2State extends EntityState<Employee> {\n  // additional entities state properties goes here\n  isLoading: boolean;\n  error?: string | null;\n}\n// Note: Since  primary key is 'id', Method to select primary key is not needed\n// unlike we did it for demo 5\n\n/* A compare function used to sort the collection. The comparer function\nis only needed if the collection needs to be sorted before being displayed.\n */\nexport function sortByName(a: Employee, b: Employee): number {\n  return a.name.localeCompare(b.name);\n}\n\n/*\nSetting to false to leave the collection unsorted, will sorted by id which is more performant\nduring CRUD operations.\n*/\nexport const crudEntityadapter: EntityAdapter<Employee> = createEntityAdapter<Employee>({\n  sortComparer: sortByName\n  // sortComparer: false\n});\n\nexport const initialState: Crud2State = crudEntityadapter.getInitialState({\n  isLoading: false,\n  error: null\n});\n\n\n// Out-of-the-box, created entity adapter provides built-in default selectors\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = crudEntityadapter.getSelectors();\n\n\n// Extends the global state to include the search2 feature.\n// This is required because search2 feature module are lazy loaded.\n// So the reference to search2 cannot be added to global state.ts directly.\nexport interface State extends fromRoot.State {\n  crud2: Crud2State;\n}\n","import { Injectable } from '@angular/core';\nimport { Crud2StoreModule } from '@app/crud2/store/crud2-store.module';\nimport * as Crud2StoreActions from '@app/crud2/store/crud2.actions';\nimport * as Crud2StoreSelectors from '@app/crud2/store/crud2.selectors';\nimport { Employee } from '@app/in-memory-api/employee.interface';\nimport * as fromRoot from '@app/root-store';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: Crud2StoreModule })\nexport class Crud2StoreFacade {\n\n\n  // NGRX Observable Select Queries available for consumption by components\n  public isLoading$: Observable<boolean> = this.store$.pipe(select(Crud2StoreSelectors.selectCrud2LoadingStatus));\n\n  public employees$: Observable<Employee[]> = this.store$.pipe(select(Crud2StoreSelectors.selectCrud2AllEmpolyees));\n\n  public errorMessage$: Observable<string> = this.store$.pipe(select(Crud2StoreSelectors.selectCrud2Error));\n\n  constructor(private store$: Store<fromRoot.State>) {}\n\n  // NGRX Action dispatchers available for components to dispatch actions\n  public loadAllEmployee() {\n    this.store$.dispatch(new Crud2StoreActions.CRUD2EmployeeLoadRequest());\n  }\n\n  public addEmployee(employee: Employee) {\n    employee.id = null;\n    this.store$.dispatch(new Crud2StoreActions.CRUD2EmployeeCreateRequest(employee));\n  }\n\n  public updateEmployee(employee: Employee) {\n    this.store$.dispatch(new Crud2StoreActions.CRUD2EmployeeUpdateRequest(employee));\n  }\n\n  public deleteEmployee(id: number | null) {\n    this.store$.dispatch(new Crud2StoreActions.CRUD2EmployeeDeleteRequest(id));\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Crud2Effects } from '@app/crud2/store/crud2.effects';\nimport { crud2Reducer } from '@app/crud2/store/crud2.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature('crud2', crud2Reducer),\n    EffectsModule.forFeature([Crud2Effects]),\n  ]\n})\nexport class Crud2StoreModule { }\n","import { Employee } from '@app/in-memory-api/employee.interface';\nimport { isActionNameUnique } from '@app/root-store';\nimport { Action } from '@ngrx/store';\n\n// TypeScript enum’s are immutable\nexport enum ActionTypes {\n  CRUD2_EMPLOYEE_LOAD_REQUEST = '[CRUD2 Page] Load Employee Request',\n  CRUD2_EMPLOYEE_LOAD_SUCCESS = '[CRUD2 Page] Load Employee Success',\n  CRUD2_EMPLOYEE_CREATE_REQUEST = '[CRUD2 Page] Create Employee Request',\n  CRUD2_EMPLOYEE_UPDATE_REQUEST = '[CRUD2 Page] Update Employee Request',\n  CRUD2_EMPLOYEE_CREATE_OR_UPDATE_SUCCESS = '[CRUD2 Page] Create or Update Employee Success',\n  CRUD2_EMPLOYEE_DELETE_REQUEST = '[CRUD2 Page] Delete Employee Request',\n  CRUD2_EMPLOYEE_DELETE_SUCCESS = '[CRUD2 Page] Delete Employee Success',\n  CRUD2_EMPLOYEE_FAILURE = '[CRUD2 Page] Employee Failure'\n}\n\n// To ensure NgRX actions have unique names across the application.\n// This prevents any duplicate actions being dispatched.\nisActionNameUnique(ActionTypes);\n\nexport class CRUD2EmployeeLoadRequest implements Action {\n  readonly type = ActionTypes.CRUD2_EMPLOYEE_LOAD_REQUEST;\n  constructor() {}\n}\n\nexport class CRUD2EmployeeLoadSuccess implements Action {\n  readonly type = ActionTypes.CRUD2_EMPLOYEE_LOAD_SUCCESS;\n  constructor(public payload: Employee[]) {}\n}\n\nexport class CRUD2EmployeeCreateRequest implements Action {\n  readonly type = ActionTypes.CRUD2_EMPLOYEE_CREATE_REQUEST;\n  constructor(public payload: Employee) {}\n}\n\nexport class CRUD2EmployeeUpdateRequest implements Action {\n  readonly type = ActionTypes.CRUD2_EMPLOYEE_UPDATE_REQUEST;\n  constructor(public payload: Employee) {}\n}\n\nexport class CRUD2EmployeeCreateOrUpdateSuccess implements Action {\n  readonly type = ActionTypes.CRUD2_EMPLOYEE_CREATE_OR_UPDATE_SUCCESS;\n  constructor(public payload: Employee) {}\n}\n\nexport class CRUD2EmployeeDeleteRequest implements Action {\n  readonly type = ActionTypes.CRUD2_EMPLOYEE_DELETE_REQUEST;\n  constructor(public payload: number) {}\n}\n\nexport class CRUD2EmployeeDeleteSuccess implements Action {\n  readonly type = ActionTypes.CRUD2_EMPLOYEE_DELETE_SUCCESS;\n  constructor(public payload: number) {}\n}\n\nexport class CRUD2EmployeeFailure implements Action {\n  readonly type = ActionTypes.CRUD2_EMPLOYEE_FAILURE;\n  constructor(public payload: string) {}\n}\n\nexport type Union\n= CRUD2EmployeeLoadRequest\n| CRUD2EmployeeLoadSuccess\n| CRUD2EmployeeCreateRequest\n| CRUD2EmployeeUpdateRequest\n| CRUD2EmployeeCreateOrUpdateSuccess\n| CRUD2EmployeeDeleteRequest\n| CRUD2EmployeeDeleteSuccess\n| CRUD2EmployeeFailure;\n","import { Injectable } from '@angular/core';\nimport * as crud2Actions from '@app/crud2/store/crud2.actions';\nimport { Employee } from '@app/in-memory-api/employee.interface';\nimport { EmployeeService } from '@app/in-memory-api/employee.service';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\n\n@Injectable()\nexport class Crud2Effects {\n\n  constructor(\n    private employeeService: EmployeeService,\n    private actions$: Actions\n  ) { }\n\n  @Effect()\n  loadAllEmployeeEffects$: Observable<Action> = this.actions$.pipe(\n    ofType<crud2Actions.CRUD2EmployeeLoadRequest>(crud2Actions.ActionTypes.CRUD2_EMPLOYEE_LOAD_REQUEST),\n    switchMap(() =>\n      this.employeeService.getEmployees().pipe(\n        map((employees: Employee[]) => (new crud2Actions.CRUD2EmployeeLoadSuccess(employees))),\n        catchError( (error: string) => of(new crud2Actions.CRUD2EmployeeFailure(error)))\n      )\n    )\n  );\n\n  /* Except GET, for others POST,DELET, UPADTE always use concatMap\n   concatMap maintains order in which request comes , queue the request and\n   returns the response in order it received whereas mergeMap does n't\n   maintain order. Switch will cancel the previous request , takes only\n   the latest one, switchMap is safe only for GET method. */\n  @Effect()\n  createEmployeeEffects$: Observable<Action> = this.actions$.pipe(\n    ofType<crud2Actions.CRUD2EmployeeCreateRequest>(crud2Actions.ActionTypes.CRUD2_EMPLOYEE_CREATE_REQUEST),\n    map((action: crud2Actions.CRUD2EmployeeCreateRequest) => action.payload),\n    concatMap((employee: Employee) =>\n      this.employeeService.createEmployee(employee).pipe(\n        map((responseEmployee: Employee) => (new crud2Actions.CRUD2EmployeeCreateOrUpdateSuccess(responseEmployee))),\n        catchError( (error: string) => of(new crud2Actions.CRUD2EmployeeFailure(error)))\n      )\n    )\n  );\n\n  @Effect()\n  updateEmployeeEffects$: Observable<Action> = this.actions$.pipe(\n    ofType<crud2Actions.CRUD2EmployeeUpdateRequest>(crud2Actions.ActionTypes.CRUD2_EMPLOYEE_UPDATE_REQUEST),\n    map((action: crud2Actions.CRUD2EmployeeUpdateRequest) => action.payload),\n    concatMap((employee: Employee) =>\n      this.employeeService.updateEmployee(employee).pipe(\n        map(() => (new crud2Actions.CRUD2EmployeeCreateOrUpdateSuccess(employee))),\n        catchError( (error: string) => of(new crud2Actions.CRUD2EmployeeFailure(error)))\n      )\n    )\n  );\n\n @Effect()\n  deleteEmployeeEffects$: Observable<Action> = this.actions$.pipe(\n    ofType<crud2Actions.CRUD2EmployeeDeleteRequest>(crud2Actions.ActionTypes.CRUD2_EMPLOYEE_DELETE_REQUEST),\n    map((action: crud2Actions.CRUD2EmployeeDeleteRequest) => action.payload),\n    concatMap((id: number) =>\n      this.employeeService.removeEmployee(id).pipe(\n        map(() => (new crud2Actions.CRUD2EmployeeDeleteSuccess(id))),\n        catchError( (error: string) => of(new crud2Actions.CRUD2EmployeeFailure(error)))\n      )\n    )\n  );\n\n}\n","import { Crud2State, crudEntityadapter, initialState } from '@app/crud2/store/crud2-state.interface';\nimport { ActionTypes, Union } from '@app/crud2/store/crud2.actions';\n\nexport function crud2Reducer(state = initialState, action: Union): Crud2State {\n  switch (action.type) {\n\n    case ActionTypes.CRUD2_EMPLOYEE_LOAD_REQUEST:\n    case ActionTypes.CRUD2_EMPLOYEE_CREATE_REQUEST:\n    case ActionTypes.CRUD2_EMPLOYEE_UPDATE_REQUEST:\n    case ActionTypes.CRUD2_EMPLOYEE_DELETE_REQUEST: {\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    }\n\n    case ActionTypes.CRUD2_EMPLOYEE_LOAD_SUCCESS: {\n      return crudEntityadapter.addAll(action.payload, {\n        ...state,\n        isLoading: false,\n        error: null\n      });\n    }\n\n    case ActionTypes.CRUD2_EMPLOYEE_CREATE_OR_UPDATE_SUCCESS: {\n      return crudEntityadapter.upsertOne(action.payload, {\n        ...state,\n        isLoading: false,\n        error: null\n      });\n    }\n\n    case ActionTypes.CRUD2_EMPLOYEE_DELETE_SUCCESS: {\n      return crudEntityadapter.removeOne(action.payload, {\n        ...state,\n        isLoading: false,\n        error: null\n      });\n    }\n\n    case ActionTypes.CRUD2_EMPLOYEE_FAILURE:\n    return {\n      ...state,\n      isLoading: false,\n      error: action.payload,\n    };\n\n    default:\n      return state;\n  }\n}\n","\nimport { Crud2State, selectAll } from '@app/crud2/store/crud2-state.interface';\nimport { Employee } from '@app/in-memory-api/employee.interface';\nimport { createFeatureSelector, createSelector, MemoizedSelector } from '@ngrx/store';\n\n// Selector functions\nconst selectCrud2State: MemoizedSelector<object, Crud2State>\n  = createFeatureSelector<Crud2State>('crud2');\n\nexport const selectCrud2Error: MemoizedSelector<object, string> =\ncreateSelector(\n  selectCrud2State,\n  (state: Crud2State): string => state.error\n);\n\nexport const selectCrud2LoadingStatus: MemoizedSelector<object, boolean> =\ncreateSelector(\n  selectCrud2State,\n  (state: Crud2State): boolean => state.isLoading\n);\n\n// Create the default selectors\nexport const selectCrud2AllEmpolyees: MemoizedSelector<object,  Employee[]> =\ncreateSelector(\n  selectCrud2State,\n  // using created entity adapter's built-in selectors\n  selectAll\n);\n\n","import { Crud2StoreFacade } from '@app/crud2/store/crud2-store.facade';\nimport { Crud2StoreModule } from '@app/crud2/store/crud2-store.module';\nimport * as crud2Selectors from '@app/crud2/store/crud2.selectors';\n\nexport { Crud2StoreModule, Crud2StoreFacade, crud2Selectors };\n\n"],"sourceRoot":""}